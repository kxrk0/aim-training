version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: aimtrainer-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: aimtrainer
      POSTGRES_USER: aimtrainer_user
      POSTGRES_PASSWORD: aimtrainer_password
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./server/prisma/init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U aimtrainer_user -d aimtrainer"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - aimtrainer-network

  redis:
    image: redis:7-alpine
    container_name: aimtrainer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - aimtrainer-network

  # Redis Commander - Web UI for Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: aimtrainer-redis-commander
    restart: unless-stopped
    environment:
      REDIS_HOSTS: "local:redis:6379"
      HTTP_USER: admin
      HTTP_PASSWORD: admin
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - aimtrainer-network

  # Adminer - Database management tool
  adminer:
    image: adminer:latest
    container_name: aimtrainer-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - aimtrainer-network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  aimtrainer-network:
    driver: bridge 